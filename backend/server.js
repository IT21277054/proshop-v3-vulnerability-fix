import path from 'path';
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
dotenv.config();
import connectDB from './config/db.js';
import productRoutes from './routes/productRoutes.js';
import userRoutes from './routes/userRoutes.js';
import orderRoutes from './routes/orderRoutes.js';
import uploadRoutes from './routes/uploadRoutes.js';
import { notFound, errorHandler } from './middleware/errorMiddleware.js';
import cors from 'cors';
import helmet from 'helmet';
import mongoSanitize from 'express-mongo-sanitize';
const port = process.env.PORT || 5000;
import rateLimit from 'express-rate-limit';
//import setSecurityHeaders from './SecurityHeader.js';

const corsOptions = {
  origin: 'http://localhost:3000',
  credentials: true, // Allow credentials (cookies)
};
connectDB();

const app = express();
app.use(cors(corsOptions));
//setSecurityHeaders(app);
//set security headers
app.use(helmet());

// set the X-Content-Type-Options header:
// app.use(helmet.noSniff());

// mongoSanitize to protect MongoDB queries
app.use(mongoSanitize());

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

app.use('/api/products', productRoutes);
app.use('/api/users', userRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/upload', uploadRoutes);

// PayPal configuration route
app.get('/api/config/paypal', (req, res) =>
  res.send({ clientId: process.env.PAYPAL_CLIENT_ID })
);

// Serve static files for production
if (process.env.NODE_ENV === 'production') {
  const __dirname = path.resolve();
  app.use(helmet.noSniff());
  app.use('/uploads', express.static('/var/data/uploads'));
  app.use(express.static(path.join(__dirname, '/frontend/build')));

  const fileRequestLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // limit each IP to 100 requests per windowMs
    message: 'Too many requests, please try again later.',
  });

  app.get('*', fileRequestLimiter, (req, res) =>
    res.sendFile(path.resolve(__dirname, 'frontend', 'build', 'index.html'))
  );
} else {
  const __dirname = path.resolve();
  app.use(helmet.noSniff());
  app.use('/uploads', express.static(path.join(__dirname, '/uploads')));
  app.get('/', (req, res) => {
    res.send('API is running....');
  });
}

// Ensure favicon.ico is served securely
app.use('/favicon.ico', (req, res, next) => {
  const clientIp = req.ip;
  if (allowedOrigins.includes(req.hostname)) {
    express.static(path.join(__dirname, 'public', 'favicon.ico'))(req, res, next);
  } else {
    res.status(403).json({ message: 'Access denied' }); // Properly formatted JSON response
  }
});

// CSRF token route (for the frontend to get the token)
app.get('/api/csrf-token', (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
});

// Middleware for handling 404 and errors
app.use(notFound);
app.use(errorHandler);
app.listen(port, () =>
  console.log(`Server running in ${process.env.NODE_ENV} mode on port ${port}`)
);