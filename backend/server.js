import path from 'path';
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import helmet from 'helmet';
import mongoSanitize from 'express-mongo-sanitize';
import morgan from 'morgan';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import { notFound, errorHandler } from './middleware/errorMiddleware.js';
import connectDB from './config/db.js';
import productRoutes from './routes/productRoutes.js';
import userRoutes from './routes/userRoutes.js';
import orderRoutes from './routes/orderRoutes.js';
import uploadRoutes from './routes/uploadRoutes.js';

dotenv.config(); // Load environment variables from .env file

// Connect to the MongoDB database
connectDB();

const app = express();
const port = process.env.PORT || 5000;

// Rate limiting to prevent abuse (100 requests per 15 minutes)
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per window
  message: 'Too many requests, please try again later.',
});
app.use('/api/', apiLimiter);

// CORS configuration to allow front-end (from specified origin) to access the API
const corsOptions = {
  origin: 'http://localhost:3000',  // Replace with your frontend URL in production
  credentials: true,                // Allow credentials (cookies)
};
app.use(cors(corsOptions));

// Helmet for securing HTTP headers (enhancing security)
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"], // Default policy to restrict resources to the same origin
        scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "https:"], // Allow inline scripts and eval
        styleSrc: ["'self'", "'unsafe-inline'", "https:"], // Allow inline styles and external from https
        imgSrc: ["'self'", "data:", "https:"], // Allow images from the same origin, data URIs, and HTTPS
      },
    },
    frameguard: { action: 'deny' }, // Deny use of iframe to prevent clickjacking
    referrerPolicy: { policy: 'no-referrer' }, // Prevents leaking the origin of the request in the Referer header
    xssFilter: true, // XSS protection
    noSniff: true, // Prevent MIME-type sniffing
    hidePoweredBy: true, // Hide "X-Powered-By" header to avoid exposing technology stack
  })
);

// Disable the 'X-Powered-By' header for security purposes
app.disable('x-powered-by');

// Sanitize data to prevent NoSQL injections
app.use(mongoSanitize());

// Morgan for logging HTTP requests in development mode
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
}

// Middleware for parsing JSON and URL-encoded request bodies and cookies
app.use(express.json()); // Parse JSON request bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(cookieParser()); // Parse cookies

// Enable response compression to reduce response size
app.use(compression());

// API routes for products, users, orders, and file uploads
app.use('/api/products', productRoutes);
app.use('/api/users', userRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/upload', uploadRoutes);

// PayPal client ID configuration route
app.get('/api/config/paypal', (req, res) => 
  res.send({ clientId: process.env.PAYPAL_CLIENT_ID })
);

// Static file serving and production build handling
if (process.env.NODE_ENV === 'production') {
  const __dirname = path.resolve(); // Get the root directory

  // Serve static assets from the 'uploads' directory
  app.use('/uploads', express.static(path.join(__dirname, '/var/data/uploads')));

  // Serve frontend build assets (React, for instance)
  app.use(express.static(path.join(__dirname, '/frontend/build')));

  // For any unrecognized routes, serve the frontend `index.html` (for single-page application)
  app.get('*', (req, res) =>
    res.sendFile(path.resolve(__dirname, 'frontend', 'build', 'index.html'))
  );
} else {
  // Default route for development mode
  app.get('/', (req, res) => {
    res.send('API is running...');
  });
}

// Middleware for handling not found routes (404)
app.use(notFound);

// Global error handling middleware
app.use(errorHandler);

// Start the server and listen on the configured port
app.listen(port, () => 
  console.log(`Server running in ${process.env.NODE_ENV} mode on port ${port}`)
);
