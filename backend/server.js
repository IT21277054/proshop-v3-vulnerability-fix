import path from 'path';
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import connectDB from './config/db.js';
import productRoutes from './routes/productRoutes.js';
import userRoutes from './routes/userRoutes.js';
import orderRoutes from './routes/orderRoutes.js';
import uploadRoutes from './routes/uploadRoutes.js';
import { notFound, errorHandler } from './middleware/errorMiddleware.js';
import cors from 'cors';
import helmet from 'helmet';
import contentSecurityPolicy from './middleware/contentSecurityPolicy.js'; // Import the CSP middleware
import mongoSanitize from 'express-mongo-sanitize';
import rateLimit from 'express-rate-limit';
import csurf from 'csurf';

dotenv.config();
const port = process.env.PORT || 5000;

const corsOptions = {
  origin: 'http://localhost:3000',
  credentials: true, // Allow credentials (cookies)
};
//db connection
connectDB();

const app = express();
app.set('trust proxy', 1);  // Trust the first proxy, adjust if needed for more

app.use(cors(corsOptions));

//set security headers
// Apply security headers including CSP from your custom middleware
// app.use(helmet({
//   contentSecurityPolicy: false,  // Disable default CSP to avoid conflicts
// }));
// app.use(contentSecurityPolicy);  // Apply the custom CSP middleware

app.use( helmet({
  contentSecurityPolicy: process.env.NODE_ENV === 'production' ? {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "trusted-scripts.com"],
      styleSrc: ["'self'", "'unsafe-inline'", "trusted-styles.com"],
      imgSrc: ["'self'", "data:", "trusted-cdn.com"],
      fontSrc: ["'self'", "trusted-fonts.com"],
      objectSrc: ["'none'"],
      upgradeInsecureRequests: [],
    },
  } : false, // Disable CSP for development to avoid blocking resources
})
);

// set the X-Content-Type-Options header:
app.use(helmet.noSniff());

// mongoSanitize to protect MongoDB queries
app.use(mongoSanitize());


// // CSRF protection middleware
// const csrfProtection = csurf({ cookie: true });

// // Apply CSRF protection only to specific routes
// app.use('/api/orders', csrfProtection);
// app.use('/api/upload', csrfProtection);



app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

app.use('/api/products', productRoutes);
app.use('/api/users', userRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/upload', uploadRoutes);

app.get('/api/config/paypal', (req, res) =>
  res.send({ clientId: process.env.PAYPAL_CLIENT_ID })
);

if (process.env.NODE_ENV === 'production') {
  const __dirname = path.resolve();
  app.use(helmet.noSniff());
  app.use('/uploads', express.static('/var/data/uploads',{ dotfiles: 'ignore' }));
  app.use(express.static(path.join(__dirname, '/frontend/build'),{ dotfiles: 'ignore' }));

  const fileRequestLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again after 15 minutes'
  });

  app.get('*', fileRequestLimiter, (req, res) =>
    res.sendFile(path.resolve(__dirname, 'frontend', 'build', 'index.html'))
  );
} else {
  const __dirname = path.resolve();
  app.use(helmet.noSniff());
  app.use('/uploads', express.static(path.join(__dirname, '/uploads')));
  app.get('/', (req, res) => {
    res.send('API is running....');
  });
}

app.use(notFound);
app.use(errorHandler);
app.listen(port, () =>
  console.log(`Server running in ${process.env.NODE_ENV} mode on port ${port}`)
);
