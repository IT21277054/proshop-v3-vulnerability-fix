import path from 'path';
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import csrf from 'csurf'; // CSRF protection middleware
import cors from 'cors';
import helmet from 'helmet';
import mongoSanitize from 'express-mongo-sanitize';
import hpp from 'hpp';  // HTTP Parameter Pollution protection
import compression from 'compression'; // Data compression for performance
import rateLimit from 'express-rate-limit'; // Rate limiting

import connectDB from './config/db.js';
import productRoutes from './routes/productRoutes.js';
import userRoutes from './routes/userRoutes.js';
import orderRoutes from './routes/orderRoutes.js';
import uploadRoutes from './routes/uploadRoutes.js';
import { notFound, errorHandler } from './middleware/errorMiddleware.js';

dotenv.config();

const port = process.env.PORT || 5000;

// Connect to database
connectDB();

const app = express();

// Disable 'X-Powered-By' header to prevent leaking server info
app.disable('x-powered-by');

// Security headers using Helmet
app.use(helmet());

// X-Content-Type-Options header to prevent MIME sniffing
app.use(helmet.noSniff());

// Prevent clickjacking with X-Frame-Options header
app.use(helmet.frameguard({ action: 'deny' }));

// Add HSTS (Strict-Transport-Security) for production to enforce HTTPS
if (process.env.NODE_ENV === 'production') {
  app.use(helmet.hsts({ maxAge: 31536000, includeSubDomains: true, preload: true }));
}

// Mongo sanitize to prevent NoSQL injection attacks
app.use(mongoSanitize());

// Prevent HTTP Parameter Pollution attacks
app.use(hpp());

// Enable data compression to improve performance
app.use(compression());

// CORS configuration: restrict to specific domains
const allowedOrigins = ['http://localhost:3000', 'http://localhost:5000'];
app.use(cors({
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
}));

// Trust the proxy (if using behind a proxy like Nginx or Heroku)
app.set('trust proxy', 1);

// Rate limiting: Limit the number of requests from a single IP address to prevent brute-force attacks
const limiter = rateLimit({
  windowMs: 10 * 60 * 1000, // 10 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again after 10 minutes'
});
app.use(limiter);

// Body parser middleware for parsing JSON and URL-encoded data
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// CSRF protection middleware (set it after cookie parser)
const csrfProtection = csrf({ cookie: true });
app.use(csrfProtection);

// Enable CORS for the specified origin
const corsOptions = {
  origin: 'http://localhost:3000', // Change to your frontend domain in production
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  credentials: true, // Allow credentials (cookies)
};
app.use(cors(corsOptions));

// API routes
app.use('/api/products', productRoutes);
app.use('/api/users', userRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/upload', uploadRoutes);

// PayPal configuration route
app.get('/api/config/paypal', (req, res) =>
  res.send({ clientId: process.env.PAYPAL_CLIENT_ID })
);

// Serve static files for production
if (process.env.NODE_ENV === 'production') {
  const __dirname = path.resolve();
  app.use('/uploads', express.static('/var/data/uploads'));
  app.use(express.static(path.join(__dirname, '/frontend/build')));

  // For any unrecognized routes, serve the frontend `index.html` (for single-page application)
  app.get('*', (req, res) =>
    res.sendFile(path.resolve(__dirname, 'frontend', 'build', 'index.html'))
  );
} else {
  const __dirname = path.resolve();
  app.use('/uploads', express.static(path.join(__dirname, '/uploads')));
  app.get('/', (req, res) => {
    res.send('API is running....');
  });
}

// Ensure favicon.ico is served securely
app.use('/favicon.ico', (req, res, next) => {
  const clientIp = req.ip;
  if (allowedOrigins.includes(req.hostname)) {
    express.static(path.join(__dirname, 'public', 'favicon.ico'))(req, res, next);
  } else {
    res.status(403).json({ message: 'Access denied' }); // Properly formatted JSON response
  }
});

// CSRF token route (for the frontend to get the token)
app.get('/api/csrf-token', (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
});

// Middleware for handling 404 and errors
app.use(notFound);

// Global error handling middleware
app.use(errorHandler);

// Start the server
app.listen(port, () =>
  console.log(`Server running in ${process.env.NODE_ENV} mode on port ${port}`)
);
